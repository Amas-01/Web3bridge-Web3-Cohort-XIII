/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type { SimpleLudo, SimpleLudoInterface } from "../SimpleLudo";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ColorTaken",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientStake",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidName",
    type: "error",
  },
  {
    inputs: [],
    name: "MaxPlayersReached",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "PlayerNotFound",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "roll",
        type: "uint256",
      },
    ],
    name: "DiceRolled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newPosition",
        type: "uint256",
      },
    ],
    name: "PlayerMoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "playerAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: false,
        internalType: "enum PieceColor",
        name: "color",
        type: "uint8",
      },
    ],
    name: "PlayerRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "prize",
        type: "uint256",
      },
    ],
    name: "WinnerDeclared",
    type: "event",
  },
  {
    inputs: [],
    name: "BOARD_END",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MAX_PLAYERS",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "STAKE_AMOUNT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllPlayers",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "position",
            type: "uint256",
          },
          {
            internalType: "enum PieceColor",
            name: "color",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "playerAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "stake",
            type: "uint256",
          },
        ],
        internalType: "struct SimpleLudo.Player[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_playerAddress",
        type: "address",
      },
    ],
    name: "getPlayer",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "position",
            type: "uint256",
          },
          {
            internalType: "enum PieceColor",
            name: "color",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "playerAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "stake",
            type: "uint256",
          },
        ],
        internalType: "struct SimpleLudo.Player",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "makeMove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "players",
    outputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "position",
        type: "uint256",
      },
      {
        internalType: "enum PieceColor",
        name: "color",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "playerAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "stake",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "enum PieceColor",
        name: "_color",
        type: "uint8",
      },
    ],
    name: "registerPlayer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "resetGame",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161227b38038061227b8339818101604052810190610032919061011d565b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061014a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ea826100bf565b9050919050565b6100fa816100df565b811461010557600080fd5b50565b600081519050610117816100f1565b92915050565b600060208284031215610133576101326100ba565b5b600061014184828501610108565b91505092915050565b612122806101596000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638da5cb5b116100715780638da5cb5b14610140578063bb4722191461015e578063efa1c48214610168578063f71d96cb14610186578063faf5625f146101ba578063fc0c546a146101d8576100a9565b806302bc726d146100ae5780632e16a4f7146100ca578063387a6d6f146100e85780634411b3eb146100f25780635c12cd4b14610110575b600080fd5b6100c860048036038101906100c3919061145e565b6101f6565b005b6100d2610685565b6040516100df91906114d3565b60405180910390f35b6100f061068a565b005b6100fa61098d565b60405161010791906114d3565b60405180910390f35b61012a6004803603810190610125919061154c565b610992565b6040516101379190611703565b60405180910390f35b610148610bd3565b6040516101559190611734565b60405180910390f35b610166610bf9565b005b610170610d2e565b60405161017d9190611887565b60405180910390f35b6101a0600480360381019061019b91906118d5565b610ec4565b6040516101b195949392919061195b565b60405180910390f35b6101c2610fbf565b6040516101cf91906114d3565b60405180910390f35b6101e0610fcc565b6040516101ed9190611a14565b60405180910390f35b6000825103610231576040517f430f13b300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600460008054905010610270576040517f94d0eef900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003600082600381111561028757610286611607565b5b600381111561029957610298611607565b5b815260200190815260200160002060009054906101000a900460ff16156102ec576040517f4d1e809400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b68056bc75e2d63100000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016103519190611734565b602060405180830381865afa15801561036e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103929190611a44565b10156103ca576040517ff1bc94d200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333068056bc75e2d631000006040518463ffffffff1660e01b815260040161043293929190611a71565b6020604051808303816000875af1158015610451573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104759190611ae0565b6104b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ab90611b59565b60405180910390fd5b60006040518060a00160405280848152602001600081526020018360038111156104e1576104e0611607565b5b81526020013373ffffffffffffffffffffffffffffffffffffffff16815260200168056bc75e2d631000008152509050600081908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000190816105529190611d7b565b506020820151816001015560408201518160020160006101000a81548160ff0219169083600381111561058857610587611607565b5b021790555060608201518160020160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816003015550506001600360008460038111156105f9576105f8611607565b5b600381111561060b5761060a611607565b5b815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167fa4e3e83915a129a7a35c973747aa80620677687eaf3adda20fa7e0644d01f9298484604051610678929190611e4d565b60405180910390a2505050565b603281565b60005b600080549050811015610958573373ffffffffffffffffffffffffffffffffffffffff16600082815481106106c5576106c4611e7d565b5b906000526020600020906004020160020160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361094b57600061071c610ff2565b9050806000838154811061073357610732611e7d565b5b906000526020600020906004020160010160008282546107539190611edb565b925050819055506032600083815481106107705761076f611e7d565b5b906000526020600020906004020160010154106108835760326000838154811061079d5761079c611e7d565b5b9060005260206000209060040201600101819055503373ffffffffffffffffffffffffffffffffffffffff167fe0a1b340a14d47a5482875f738abb6e2c70f533d80188606facc527b70cbd212600084815481106107fe576107fd611e7d565b5b90600052602060002090600402016001015460405161081d91906114d3565b60405180910390a23373ffffffffffffffffffffffffffffffffffffffff167f1ef79941499983e5c21ea7f676dda47f58a2dd04d9b4bb110544a7b7ee7ff1238260405161086b91906114d3565b60405180910390a261087c3361103f565b505061098b565b3373ffffffffffffffffffffffffffffffffffffffff167f1ef79941499983e5c21ea7f676dda47f58a2dd04d9b4bb110544a7b7ee7ff123826040516108c991906114d3565b60405180910390a23373ffffffffffffffffffffffffffffffffffffffff167fe0a1b340a14d47a5482875f738abb6e2c70f533d80188606facc527b70cbd2126000848154811061091d5761091c611e7d565b5b90600052602060002090600402016001015460405161093c91906114d3565b60405180910390a2505061098b565b808060010191505061068d565b506040517f2a645edb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b600481565b61099a611195565b60005b600080549050811015610b9b578273ffffffffffffffffffffffffffffffffffffffff16600082815481106109d5576109d4611e7d565b5b906000526020600020906004020160020160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610b8e5760008181548110610a3657610a35611e7d565b5b90600052602060002090600402016040518060a0016040529081600082018054610a5f90611ba8565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8b90611ba8565b8015610ad85780601f10610aad57610100808354040283529160200191610ad8565b820191906000526020600020905b815481529060010190602001808311610abb57829003601f168201915b50505050508152602001600182015481526020016002820160009054906101000a900460ff166003811115610b1057610b0f611607565b5b6003811115610b2257610b21611607565b5b81526020016002820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481525050915050610bce565b808060010191505061099d565b506040517f2a645edb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c80576040517f5fc483c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600080549050811015610d1e57600060036000808481548110610ca957610ca8611e7d565b5b906000526020600020906004020160020160009054906101000a900460ff166003811115610cda57610cd9611607565b5b6003811115610cec57610ceb611607565b5b815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050610c83565b50600080610d2c91906111ec565b565b60606000805480602002602001604051908101604052809291908181526020016000905b82821015610ebb57838290600052602060002090600402016040518060a0016040529081600082018054610d8590611ba8565b80601f0160208091040260200160405190810160405280929190818152602001828054610db190611ba8565b8015610dfe5780601f10610dd357610100808354040283529160200191610dfe565b820191906000526020600020905b815481529060010190602001808311610de157829003601f168201915b50505050508152602001600182015481526020016002820160009054906101000a900460ff166003811115610e3657610e35611607565b5b6003811115610e4857610e47611607565b5b81526020016002820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152505081526020019060010190610d52565b50505050905090565b60008181548110610ed457600080fd5b9060005260206000209060040201600091509050806000018054610ef790611ba8565b80601f0160208091040260200160405190810160405280929190818152602001828054610f2390611ba8565b8015610f705780601f10610f4557610100808354040283529160200191610f70565b820191906000526020600020905b815481529060010190602001808311610f5357829003601f168201915b5050505050908060010154908060020160009054906101000a900460ff16908060020160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154905085565b68056bc75e2d6310000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006001600642443360405160200161100d93929190611f78565b6040516020818303038152906040528051906020012060001c6110309190611fe4565b61103a9190611edb565b905090565b6000808054905068056bc75e2d6310000061105a9190612015565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b81526004016110b9929190612057565b6020604051808303816000875af11580156110d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fc9190611ae0565b61113b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611132906120cc565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f3cf1af53e79884a92609ce59db1ec9f584d88e2d14c8eaba43a21db81318301e8260405161118191906114d3565b60405180910390a2611191610bf9565b5050565b6040518060a001604052806060815260200160008152602001600060038111156111c2576111c1611607565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b508054600082556004029060005260206000209081019061120d9190611210565b50565b5b8082111561127e576000808201600061122a9190611282565b60018201600090556002820160006101000a81549060ff02191690556002820160016101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600382016000905550600401611211565b5090565b50805461128e90611ba8565b6000825580601f106112a057506112bf565b601f0160209004906000526020600020908101906112be91906112c2565b5b50565b5b808211156112db5760008160009055506001016112c3565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611346826112fd565b810181811067ffffffffffffffff821117156113655761136461130e565b5b80604052505050565b60006113786112df565b9050611384828261133d565b919050565b600067ffffffffffffffff8211156113a4576113a361130e565b5b6113ad826112fd565b9050602081019050919050565b82818337600083830152505050565b60006113dc6113d784611389565b61136e565b9050828152602081018484840111156113f8576113f76112f8565b5b6114038482856113ba565b509392505050565b600082601f8301126114205761141f6112f3565b5b81356114308482602086016113c9565b91505092915050565b6004811061144657600080fd5b50565b60008135905061145881611439565b92915050565b60008060408385031215611475576114746112e9565b5b600083013567ffffffffffffffff811115611493576114926112ee565b5b61149f8582860161140b565b92505060206114b085828601611449565b9150509250929050565b6000819050919050565b6114cd816114ba565b82525050565b60006020820190506114e860008301846114c4565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611519826114ee565b9050919050565b6115298161150e565b811461153457600080fd5b50565b60008135905061154681611520565b92915050565b600060208284031215611562576115616112e9565b5b600061157084828501611537565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156115b3578082015181840152602081019050611598565b60008484015250505050565b60006115ca82611579565b6115d48185611584565b93506115e4818560208601611595565b6115ed816112fd565b840191505092915050565b611601816114ba565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061164757611646611607565b5b50565b600081905061165882611636565b919050565b60006116688261164a565b9050919050565b6116788161165d565b82525050565b6116878161150e565b82525050565b600060a08301600083015184820360008601526116aa82826115bf565b91505060208301516116bf60208601826115f8565b5060408301516116d2604086018261166f565b5060608301516116e5606086018261167e565b5060808301516116f860808601826115f8565b508091505092915050565b6000602082019050818103600083015261171d818461168d565b905092915050565b61172e8161150e565b82525050565b60006020820190506117496000830184611725565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060a083016000830151848203600086015261179882826115bf565b91505060208301516117ad60208601826115f8565b5060408301516117c0604086018261166f565b5060608301516117d3606086018261167e565b5060808301516117e660808601826115f8565b508091505092915050565b60006117fd838361177b565b905092915050565b6000602082019050919050565b600061181d8261174f565b611827818561175a565b9350836020820285016118398561176b565b8060005b85811015611875578484038952815161185685826117f1565b945061186183611805565b925060208a0199505060018101905061183d565b50829750879550505050505092915050565b600060208201905081810360008301526118a18184611812565b905092915050565b6118b2816114ba565b81146118bd57600080fd5b50565b6000813590506118cf816118a9565b92915050565b6000602082840312156118eb576118ea6112e9565b5b60006118f9848285016118c0565b91505092915050565b600082825260208201905092915050565b600061191e82611579565b6119288185611902565b9350611938818560208601611595565b611941816112fd565b840191505092915050565b6119558161165d565b82525050565b600060a08201905081810360008301526119758188611913565b905061198460208301876114c4565b611991604083018661194c565b61199e6060830185611725565b6119ab60808301846114c4565b9695505050505050565b6000819050919050565b60006119da6119d56119d0846114ee565b6119b5565b6114ee565b9050919050565b60006119ec826119bf565b9050919050565b60006119fe826119e1565b9050919050565b611a0e816119f3565b82525050565b6000602082019050611a296000830184611a05565b92915050565b600081519050611a3e816118a9565b92915050565b600060208284031215611a5a57611a596112e9565b5b6000611a6884828501611a2f565b91505092915050565b6000606082019050611a866000830186611725565b611a936020830185611725565b611aa060408301846114c4565b949350505050565b60008115159050919050565b611abd81611aa8565b8114611ac857600080fd5b50565b600081519050611ada81611ab4565b92915050565b600060208284031215611af657611af56112e9565b5b6000611b0484828501611acb565b91505092915050565b7f5374616b65207472616e73666572206661696c65640000000000000000000000600082015250565b6000611b43601583611902565b9150611b4e82611b0d565b602082019050919050565b60006020820190508181036000830152611b7281611b36565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611bc057607f821691505b602082108103611bd357611bd2611b79565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611c3b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611bfe565b611c458683611bfe565b95508019841693508086168417925050509392505050565b6000611c78611c73611c6e846114ba565b6119b5565b6114ba565b9050919050565b6000819050919050565b611c9283611c5d565b611ca6611c9e82611c7f565b848454611c0b565b825550505050565b600090565b611cbb611cae565b611cc6818484611c89565b505050565b5b81811015611cea57611cdf600082611cb3565b600181019050611ccc565b5050565b601f821115611d2f57611d0081611bd9565b611d0984611bee565b81016020851015611d18578190505b611d2c611d2485611bee565b830182611ccb565b50505b505050565b600082821c905092915050565b6000611d5260001984600802611d34565b1980831691505092915050565b6000611d6b8383611d41565b9150826002028217905092915050565b611d8482611579565b67ffffffffffffffff811115611d9d57611d9c61130e565b5b611da78254611ba8565b611db2828285611cee565b600060209050601f831160018114611de55760008415611dd3578287015190505b611ddd8582611d5f565b865550611e45565b601f198416611df386611bd9565b60005b82811015611e1b57848901518255600182019150602085019450602081019050611df6565b86831015611e385784890151611e34601f891682611d41565b8355505b6001600288020188555050505b505050505050565b60006040820190508181036000830152611e678185611913565b9050611e76602083018461194c565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611ee6826114ba565b9150611ef1836114ba565b9250828201905080821115611f0957611f08611eac565b5b92915050565b6000819050919050565b611f2a611f25826114ba565b611f0f565b82525050565b60008160601b9050919050565b6000611f4882611f30565b9050919050565b6000611f5a82611f3d565b9050919050565b611f72611f6d8261150e565b611f4f565b82525050565b6000611f848286611f19565b602082019150611f948285611f19565b602082019150611fa48284611f61565b601482019150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611fef826114ba565b9150611ffa836114ba565b92508261200a57612009611fb5565b5b828206905092915050565b6000612020826114ba565b915061202b836114ba565b9250828202612039816114ba565b915082820484148315176120505761204f611eac565b5b5092915050565b600060408201905061206c6000830185611725565b61207960208301846114c4565b9392505050565b7f5072697a65207472616e73666572206661696c65640000000000000000000000600082015250565b60006120b6601583611902565b91506120c182612080565b602082019050919050565b600060208201905081810360008301526120e5816120a9565b905091905056fea2646970667358221220e6763255b5d80030dadd1fa0fe5cacacb5c4ebb3c1a7a211447028eb19fac76d64736f6c634300081c0033";

type SimpleLudoConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleLudoConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleLudo__factory extends ContractFactory {
  constructor(...args: SimpleLudoConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _tokenAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_tokenAddress, overrides || {});
  }
  override deploy(
    _tokenAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_tokenAddress, overrides || {}) as Promise<
      SimpleLudo & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SimpleLudo__factory {
    return super.connect(runner) as SimpleLudo__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleLudoInterface {
    return new Interface(_abi) as SimpleLudoInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): SimpleLudo {
    return new Contract(address, _abi, runner) as unknown as SimpleLudo;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace SimpleLudo {
  export type PlayerStruct = {
    name: string;
    position: BigNumberish;
    color: BigNumberish;
    playerAddress: AddressLike;
    stake: BigNumberish;
  };

  export type PlayerStructOutput = [
    name: string,
    position: bigint,
    color: bigint,
    playerAddress: string,
    stake: bigint
  ] & {
    name: string;
    position: bigint;
    color: bigint;
    playerAddress: string;
    stake: bigint;
  };
}

export interface SimpleLudoInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BOARD_END"
      | "MAX_PLAYERS"
      | "STAKE_AMOUNT"
      | "getAllPlayers"
      | "getPlayer"
      | "makeMove"
      | "owner"
      | "players"
      | "registerPlayer"
      | "resetGame"
      | "token"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DiceRolled"
      | "PlayerMoved"
      | "PlayerRegistered"
      | "WinnerDeclared"
  ): EventFragment;

  encodeFunctionData(functionFragment: "BOARD_END", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_PLAYERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKE_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "makeMove", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPlayer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "resetGame", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(functionFragment: "BOARD_END", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PLAYERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKE_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlayer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makeMove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resetGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
}

export namespace DiceRolledEvent {
  export type InputTuple = [player: AddressLike, roll: BigNumberish];
  export type OutputTuple = [player: string, roll: bigint];
  export interface OutputObject {
    player: string;
    roll: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerMovedEvent {
  export type InputTuple = [player: AddressLike, newPosition: BigNumberish];
  export type OutputTuple = [player: string, newPosition: bigint];
  export interface OutputObject {
    player: string;
    newPosition: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerRegisteredEvent {
  export type InputTuple = [
    playerAddress: AddressLike,
    name: string,
    color: BigNumberish
  ];
  export type OutputTuple = [
    playerAddress: string,
    name: string,
    color: bigint
  ];
  export interface OutputObject {
    playerAddress: string;
    name: string;
    color: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinnerDeclaredEvent {
  export type InputTuple = [winner: AddressLike, prize: BigNumberish];
  export type OutputTuple = [winner: string, prize: bigint];
  export interface OutputObject {
    winner: string;
    prize: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SimpleLudo extends BaseContract {
  connect(runner?: ContractRunner | null): SimpleLudo;
  waitForDeployment(): Promise<this>;

  interface: SimpleLudoInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BOARD_END: TypedContractMethod<[], [bigint], "view">;

  MAX_PLAYERS: TypedContractMethod<[], [bigint], "view">;

  STAKE_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  getAllPlayers: TypedContractMethod<
    [],
    [SimpleLudo.PlayerStructOutput[]],
    "view"
  >;

  getPlayer: TypedContractMethod<
    [_playerAddress: AddressLike],
    [SimpleLudo.PlayerStructOutput],
    "view"
  >;

  makeMove: TypedContractMethod<[], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  players: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, string, bigint] & {
        name: string;
        position: bigint;
        color: bigint;
        playerAddress: string;
        stake: bigint;
      }
    ],
    "view"
  >;

  registerPlayer: TypedContractMethod<
    [_name: string, _color: BigNumberish],
    [void],
    "nonpayable"
  >;

  resetGame: TypedContractMethod<[], [void], "nonpayable">;

  token: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BOARD_END"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_PLAYERS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "STAKE_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAllPlayers"
  ): TypedContractMethod<[], [SimpleLudo.PlayerStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getPlayer"
  ): TypedContractMethod<
    [_playerAddress: AddressLike],
    [SimpleLudo.PlayerStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "makeMove"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "players"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, string, bigint] & {
        name: string;
        position: bigint;
        color: bigint;
        playerAddress: string;
        stake: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerPlayer"
  ): TypedContractMethod<
    [_name: string, _color: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resetGame"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "DiceRolled"
  ): TypedContractEvent<
    DiceRolledEvent.InputTuple,
    DiceRolledEvent.OutputTuple,
    DiceRolledEvent.OutputObject
  >;
  getEvent(
    key: "PlayerMoved"
  ): TypedContractEvent<
    PlayerMovedEvent.InputTuple,
    PlayerMovedEvent.OutputTuple,
    PlayerMovedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerRegistered"
  ): TypedContractEvent<
    PlayerRegisteredEvent.InputTuple,
    PlayerRegisteredEvent.OutputTuple,
    PlayerRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "WinnerDeclared"
  ): TypedContractEvent<
    WinnerDeclaredEvent.InputTuple,
    WinnerDeclaredEvent.OutputTuple,
    WinnerDeclaredEvent.OutputObject
  >;

  filters: {
    "DiceRolled(address,uint256)": TypedContractEvent<
      DiceRolledEvent.InputTuple,
      DiceRolledEvent.OutputTuple,
      DiceRolledEvent.OutputObject
    >;
    DiceRolled: TypedContractEvent<
      DiceRolledEvent.InputTuple,
      DiceRolledEvent.OutputTuple,
      DiceRolledEvent.OutputObject
    >;

    "PlayerMoved(address,uint256)": TypedContractEvent<
      PlayerMovedEvent.InputTuple,
      PlayerMovedEvent.OutputTuple,
      PlayerMovedEvent.OutputObject
    >;
    PlayerMoved: TypedContractEvent<
      PlayerMovedEvent.InputTuple,
      PlayerMovedEvent.OutputTuple,
      PlayerMovedEvent.OutputObject
    >;

    "PlayerRegistered(address,string,uint8)": TypedContractEvent<
      PlayerRegisteredEvent.InputTuple,
      PlayerRegisteredEvent.OutputTuple,
      PlayerRegisteredEvent.OutputObject
    >;
    PlayerRegistered: TypedContractEvent<
      PlayerRegisteredEvent.InputTuple,
      PlayerRegisteredEvent.OutputTuple,
      PlayerRegisteredEvent.OutputObject
    >;

    "WinnerDeclared(address,uint256)": TypedContractEvent<
      WinnerDeclaredEvent.InputTuple,
      WinnerDeclaredEvent.OutputTuple,
      WinnerDeclaredEvent.OutputObject
    >;
    WinnerDeclared: TypedContractEvent<
      WinnerDeclaredEvent.InputTuple,
      WinnerDeclaredEvent.OutputTuple,
      WinnerDeclaredEvent.OutputObject
    >;
  };
}
